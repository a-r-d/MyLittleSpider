html
[if IE 7]>
<html class="ie ie7" lang="en-US" prefix="og: http://ogp.me/ns#">
<![endif]
[if IE 8]>
<html class="ie ie8" lang="en-US" prefix="og: http://ogp.me/ns#">
<![endif]
[if !(IE 7) | !(IE 8)  ]><!
<![endif]
flashbuilder Archives | Framework Hell
[if lt IE 9]>
<script src="http://frameworkhell.com/wp-content/themes/twentytwelve/js/html5.js" type="text/javascript"></script>
<![endif]
This site is optimized with the Yoast WordPress SEO plugin v1.3.4.1 - http://yoast.com/wordpress/seo/
/ Yoast WordPress SEO plugin.
[if lt IE 9]>
<link rel='stylesheet' id='twentytwelve-ie-css'  href='http://frameworkhell.com/wp-content/themes/twentytwelve/css/ie.css?ver=20121010' type='text/css' media='all' />
<![endif]
.ads {
			position: relative;
			text-align: center;		
			clear: both;
		}
.recentcomments a{display:inline !important;padding:0 !important;margin:0 !important;}
.site-title a,
		.site-description {
			color: #b21515 !important;
		}
body.custom-background { background-color: #e6e6e6; background-image: url('http://frameworkhell.com/wp-content/uploads/2012/12/py+bw_logo_red_140.png'); background-repeat: repeat; background-position: top left; background-attachment: fixed; }
Google Analytics Tracking by Google Analyticator 6.4.1: http://www.videousermanuals.com/google-analyticator/
var analyticsFileTypes = [''];
	var analyticsEventTracking = 'enabled';
var _gaq = _gaq || [];
	_gaq.push(['_setAccount', 'UA-34027872-1 ']);
        _gaq.push(['_addDevId', 'i9k95']); // Google Analyticator App ID with Google 
        
	_gaq.push(['_trackPageview']);

	(function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
	})();
Framework Hell
Frameworks can be hellish- I try to help.
Menu
Skip to content
blog
about me
links
projects
#site-navigation
#masthead
Category Archives:
flashbuilder
.archive-header
Flex: Add MX controls to mobile App
Leave a reply
.comments-link
.entry-header
In Flash-builder when you start a mobile project it will restrict you to only Spark controls. However, even though MX control are not optimized for mobile and should not actually be used in a mobile project, it can still be convenient to reference the source from a desktop project to re-use code. It is a little tricky to add MX controls to a mobile App because there are many libraries to reference but it can be done.
There is no “official” way to do this because Adobe absolutely does not want you using MX controls in the UI of an AIR mobile app. But to be honest, Spark controls are somewhat lacking and I have “cheated” and used the percent complete loader control in an iOS mobile app before with no ill effects. I think the newer devices are so fast it matters little. Anyway, read on.
<!--
	google_ad_client = "pub-9622909715647886";
	google_alternate_color = "FFFFFF";
	google_ad_width = 336;
	google_ad_height = 280;
	google_ad_format = "336x280_as";
	google_ad_type = "text";
	google_ad_channel ="";
	google_color_border = "";
	google_color_link = "";
	google_color_bg = "";
	google_color_text = "";
	google_color_url = "";
	google_ui_features = "rc:0";

	//-->
In the project explorer right click your mobile project and go to properties.  Select “Flex Build Path” and click the “Add SWC” button on the form. You want to browse to:
C:\Program Files (x86)\Adobe\Adobe Flash Builder 4.6\sdks\flex_sdk_4.6.0.23201\frameworks\libs\mx
Here you need to add “
mx.swc
“.
We are not done yet. Next go up one level to:
C:\Program Files (x86)\Adobe\Adobe Flash Builder 4.6\sdks\flex_sdk_4.6.0.23201\frameworks\libs
And add in “
spark.swc
“, “
sparkskins.swc
” and “
spark_dmv.swc
“.
Now, go up to:
C:\Program Files (x86)\Adobe\Adobe Flash Builder 4.6\sdks\flex_sdk_4.6.0.23201\frameworks\themese\wireframe
And pop in
wireframe.swc
This was written using Flex SDK 4.6 and AIR SDK 3.4, I don’t know if it will be different for you- but it isn’t a problem because you can fix it easily. Simply open up a new blank flex Desktop project and a new blank Flex mobile project and compare what is different in the build path. Add in the difference to the mobile app and you should be set. Again my SDK is likely different from yours so don’t go copying and pasting those paths into explorer.
.entry-content
This entry was posted in
flashbuilder
,
Flex
on
December 27, 2012
by
admin
.
.entry-meta
#post
A component skin system for same source mobile / desktop apps
Leave a reply
.comments-link
.entry-header
Preface and build path requirements to pull this off:
With Adobe AIR you have lots of support for cross platform application development, and with Flex you get an application framework to do this quickly. However the way Flex is constructed with MX controls and Spark controls it makes it difficult to re-use code between a desktop and mobile app.
To simply include the source code from a mobile project even if you are not using all of it you will need to add the mobile components into the build path or else you will not be able to compile.
The inverse is also true. If you want to include the source of a desktop app (e.g. via linking) into a mobile project because you need a few classes you will need to include all of the libraries to do this. Instructions for that are linked (there are many more libraries to include than the inverse).
how to link mobile flex project into desktop
-
http://frameworkhell.com/flex-using-mobile-components-in-a-desktop-app/
how to link desktop flex project into mobile-
Add MX controls to mobile App
A component skin system for same source mobile / desktop apps:
Once this is complete you can take the idea a step further and actually break out areas of the application(s) into components with different skin classes.
Generally for the desktop app I do this by making  panel for the window/ component I want to display. Inside of this I put my re-usable code. For mobile I use the view navigator / pushing views system that Flex supports and simply add the re-usable code the view inside of a container.
The code container I use is extended from
Spark SkinnableComponent.
You may want to try to use a Spark SkinnableContainer, but don’t- you can’t change the layout area the same way and this won’t work.  Then I include the skin class based on some flag I set in the application launcher file. I generally have two or three skin classes: Desktop, Mobile, and Tablet.
For example here is a small Component class that references skin classes based on a flag:
package com.a-r-d.someproject.modules.projectsections.contact
{
   import com.a-r-d.someproject.modules.projectsections.contact.skins.ProjectContactsDesktopSkin;
   import com.a-r-d.someproject.modules.projectsections.contact.skins.ProjectContactsMobileSkin;
   import com.a-r-d.someproject.utils.AppSessionData;
   import com.a-r-d.someproject.utils.MyConstants;
   
   import flash.display.DisplayObjectContainer;
   
   import spark.components.List;
   import spark.components.supportClasses.SkinnableComponent;

   public class ProjectContactsComponent extends SkinnableComponent
   {
      
      [SkinState("default")]
      [SkinState("loading")]
      
      [Event(name="change", type="flash.events.Event")] 
      
      public var projectIData:XML;
      public var compnentData:XML;
      
      [Bindable]
      public var fontSizeNormal:int = 20;
      
      [Bindable]
      private var title:String = "Project Contacts";
      
      [SkinPart(required="true")]
      public var internalContactList:List;
      
      [SkinPart(required="true")]
      public var externalContactList:List;
      
      
      public function ProjectContactsComponent()
      {
         this.percentWidth = 100;
         
         if( AppSessionData.deviceType == MyConstants.DEVICE_TYPE_MOBILE) {
            this.percentHeight = 100;
            
            if(AppSessionData.screen_size_category == MyConstants.DEVICE_SCREEN_SIZE_TINY ) {
               setStyle("skinClass", ProjectContactsMobileSkin);
            } else {
               setStyle("skinClass", ProjectContactsTabletSkin);
            }
         } else {
            setStyle("skinClass", ProjectContactsDesktopSkin);
            this.height = 400; // need this for show/hide effect.
         }
         
         /****
         
         YOUR RE-USABLE LOGIC GOES HERE !!!
         
         ****/
      }
      
      override protected function commitProperties():void { 
         super.commitProperties(); 
      }
      override protected function partAdded(partName:String, instance:Object):void {
         super.partAdded(partName, instance);
      }
      override protected function partRemoved(partName:String, instance:Object):void {
         super.partRemoved(partName, instance);
      }
   }
}
So this has three skin classes it will set based on the screen size and if it is on a mobile device or an a desktop. The class also references a few required layout components:
[SkinPart(required="true")]
public var internalContactList:List;
<!--
	google_ad_client = "pub-9622909715647886";
	google_alternate_color = "FFFFFF";
	google_ad_width = 468;
	google_ad_height = 60;
	google_ad_format = "468x60_as";
	google_ad_type = "text";
	google_ad_channel ="";
	google_color_border = "";
	google_color_link = "";
	google_color_bg = "";
	google_color_text = "";
	google_color_url = "";
	google_ui_features = "rc:0";

	//-->
This, for example, is a required list element- it must be present on any skin class referenced. However on the desktop and tablet versions we have more real estate so I put the two lists side by side, while in the mobile app they are on top of each other. Also all of the heights and widths are relative and percentage based so our components will scale to fit the screens we are targeting.
Now what do the skin classes look like? The skin class is a very simple MXML file with no logic that only lays out the required components. Here is the mobile skin:
<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
      xmlns:s="library://ns.adobe.com/flex/spark" 
      xmlns:mx="library://ns.adobe.com/flex/mx"
      height="100%"
      width="100%"
      >
   <!-- host component -->
   <fx:Metadata>
      [HostComponent("me.a-r-d.someproject.modules.projectsections.contact.ProjectContactsComponent")]
   </fx:Metadata>
   <s:states>
      <s:State name="default"/>
      <s:State name="loading"/>
   </s:states>
   
   <s:Scroller width="100%" height="100%">
      <s:VGroup width="100%" height="100%">
         <s:Spacer height="1%" />
         <s:Label text="Internal Contacts"/>
         <s:List id="internalContactList" borderColor="0x000000" borderVisible="true" height="45%" width="100%"></s:List>
         <s:Spacer height="2%" />
         <s:Label text="External Contacts"/>
         <s:List id="externalContactList"  borderColor="0x000000" borderVisible="true" height="45%" width="100%"></s:List>
      </s:VGroup>
   </s:Scroller>
</s:Skin>
The dekstop skin looks very similar, except for some layout changes:
<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
      xmlns:s="library://ns.adobe.com/flex/spark" 
      xmlns:mx="library://ns.adobe.com/flex/mx"
      height="100%"
      width="100%"
      minHeight="300"
      minWidth="800"
      maxHeight="600"
      maxWidth="1200"
      >
   <!-- host component -->
   <fx:Metadata>
      [HostComponent("me.a-r-d.someproject.modules.projectsections.contact.ProjectContactsComponent")]
   </fx:Metadata>
   <s:states>
      <s:State name="default"/>
      <s:State name="loading"/>
   </s:states>
   
   <s:HGroup width="100%" height="100%">
      <s:VGroup width="50%" height="100%">
         <s:Label  text="Internal Contacts"/>
         <s:List id="internalContactList" borderColor="0x000000" borderVisible="true" height="90%" width="100%"></s:List>
      </s:VGroup>
      <s:VGroup width="50%" height="100%">
         <s:Label text="External Contacts"/>
         <s:List id="externalContactList" borderColor="0x000000" borderVisible="true" height="90%" width="100%"></s:List>
      </s:VGroup>
   </s:HGroup>
</s:Skin>
How Do I use this?
As I mentioned earlier for a desktop app I like to use a panel or something as my container. For the mobile app you will want to create a container (like a Spark BorderContainer) inside of your view to shove it in.
It really is as simple as:
protected function skinnablecontainer1_contentCreationCompleteHandler(event:FlexEvent):void{
   var cont:ProjectContactsComponent = new ProjectContactsComponent();
   cont.projectIData = projectData;
   projectAttributeContainer.addElement(cont);   
}
And somewhere below in the layout for the panel below my buttons I had a container I put it in:
<s:Group id="projectAttributeContainer" width="100%" height="100%" gap="5" ></s:Group>
For mobile it is generally the exact same. Instantiate the component in the creation complete and add it to some other container you can easily manipulate later. (E.g. if you want to refresh the component you can simple remove all from the container and add it again).
Here is what the end result looks like- I put my container a much more complex panel in the desktop version, and pushed a very simple view in the mobile version:
.entry-content
This entry was posted in
flashbuilder
,
Flex
on
December 26, 2012
by
admin
.
.entry-meta
#post
Flex: Using mobile components in a Desktop app
Leave a reply
.comments-link
.entry-header
Using mobile components in a Desktop app is something you have to do occasionally when you are trying to reuse code- fortunately it is relatively easy to do this (opposed to the other way around).
<!--
	google_ad_client = "pub-9622909715647886";
	google_alternate_color = "FFFFFF";
	google_ad_width = 468;
	google_ad_height = 60;
	google_ad_format = "468x60_as";
	google_ad_type = "text";
	google_ad_channel ="";
	google_color_border = "";
	google_color_link = "";
	google_color_bg = "";
	google_color_text = "";
	google_color_url = "";
	google_ui_features = "rc:0";

	//-->
To do this I am starting from Flashbuilder in a “Flex Project” with desktop option selected. With this kind of project simply right click on the project on the and go to “properties”. This will open up a window with a side bar that has many options. Select “Flex Build Path” and click the “Add SWC” button on the form. You want to browse to:
C:\Program Files (x86)\Adobe\Adobe Flash Builder 4.6\sdks\flex_sdk_4.6.0.23201\frameworks\libs\mobile
(You may be using a different SDK that I am, but the path should generally be similar- now select the file “mobilecomponents.swc”. See the image for details.)
Next step is to add the mobile theme. You will have the references in the editor now, but the project wont compile correctly unless you add the mobile theme. To do this go to “Flex Theme” in the same properties window for the project and go to “Import Theme”. You want to import the mobile theme into the project classpath. The path on my machine was
(but again it will different based on what SDK you are using)
:
C:\Program Files (x86)\Adobe\Adobe Flash Builder 4.6\sdks\flex_sdk_4.6.0.23201\frameworks\themes\Mobile
.entry-content
This entry was posted in
flashbuilder
,
Flex
on
December 26, 2012
by
admin
.
.entry-meta
#post
Flash Builder is useless without design view
Leave a reply
.comments-link
.entry-header
Flash Builder is useless without design view. At best. Maybe more like pointless. Don’t upgrade from 4.6 to 4.7 if you actually use / need it.
If you are a programmer that does a lot of little projects using flashbuilder, mostly for in house stuff where there is no designer involved, and thus, no mock-ups and no design to work off of, then this is really horrible. MXML is not as easy to visually layout as HTML/CSS is for most people. I think most developers have been doing HTML/CSS layout for years and can do it in their sleep. Plus we have things like Bootstrap to help us speed things up. But programmatic layout in something unfamiliar and awkward is a huge burden and waste of time between compiling and checking your progress.
So what are the alternatives?
Flash Develop:
Flash develop
.. they also have a
design view plugin
.
This looks like a pretty good guide to help.
Amethyst
Not sure, but
somebody recommended this on SO.
And it looks like there are several other IDEs with AS3 and/or MXML support but nothing else really has “design view”. Soon I’m going to try to do a youtube video where I try out flash develop.
It looks like the guy that made chat roulette used flex and is rightly pissed. Check out this thread filled with some
justified rage on the adobe forums
.
And really here is big take-home message: Flash develop and flashbuilder almost look like an equal product now. Why pay for flash builder at all?
.entry-content
This entry was posted in
AS3
,
flashbuilder
,
Flex
on
December 22, 2012
by
admin
.
.entry-meta
#post
#content
#primary
Search for:
Recent Posts
Flex: Add MX controls to mobile App
A component skin system for same source mobile / desktop apps
Flex: Using mobile components in a Desktop app
Clojure Adventures Part 1
Flash Builder is useless without design view
Recent Comments
brand
on
Apache Axis 1.4 Tutorial – Making a Java Webservice with Tomcat 6. Part 1.
Archives
December 2012
September 2012
August 2012
Categories
AS3
Django
flashbuilder
Flex
Java
jQuery
Python
Uncategorized
Web Services
Meta
Log in
Entries
RSS
Comments
RSS
WordPress.org
#secondary
#main .wrapper
Proudly powered by WordPress
.site-info
#colophon
#page
//<![CDATA[
SyntaxHighlighter.all();
//]]>
