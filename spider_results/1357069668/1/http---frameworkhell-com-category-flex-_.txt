html
[if IE 7]>
<html class="ie ie7" lang="en-US" prefix="og: http://ogp.me/ns#">
<![endif]
[if IE 8]>
<html class="ie ie8" lang="en-US" prefix="og: http://ogp.me/ns#">
<![endif]
[if !(IE 7) | !(IE 8)  ]><!
<![endif]
Flex Archives | Framework Hell
[if lt IE 9]>
<script src="http://frameworkhell.com/wp-content/themes/twentytwelve/js/html5.js" type="text/javascript"></script>
<![endif]
This site is optimized with the Yoast WordPress SEO plugin v1.3.4.1 - http://yoast.com/wordpress/seo/
/ Yoast WordPress SEO plugin.
[if lt IE 9]>
<link rel='stylesheet' id='twentytwelve-ie-css'  href='http://frameworkhell.com/wp-content/themes/twentytwelve/css/ie.css?ver=20121010' type='text/css' media='all' />
<![endif]
.ads {
			position: relative;
			text-align: center;		
			clear: both;
		}
.recentcomments a{display:inline !important;padding:0 !important;margin:0 !important;}
.site-title a,
		.site-description {
			color: #b21515 !important;
		}
body.custom-background { background-color: #e6e6e6; background-image: url('http://frameworkhell.com/wp-content/uploads/2012/12/py+bw_logo_red_140.png'); background-repeat: repeat; background-position: top left; background-attachment: fixed; }
Google Analytics Tracking by Google Analyticator 6.4.1: http://www.videousermanuals.com/google-analyticator/
var analyticsFileTypes = [''];
	var analyticsEventTracking = 'enabled';
var _gaq = _gaq || [];
	_gaq.push(['_setAccount', 'UA-34027872-1 ']);
        _gaq.push(['_addDevId', 'i9k95']); // Google Analyticator App ID with Google 
        
	_gaq.push(['_trackPageview']);

	(function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
	})();
Framework Hell
Frameworks can be hellish- I try to help.
Menu
Skip to content
blog
about me
links
projects
#site-navigation
#masthead
Category Archives:
Flex
.archive-header
Flex: Add MX controls to mobile App
Leave a reply
.comments-link
.entry-header
In Flash-builder when you start a mobile project it will restrict you to only Spark controls. However, even though MX control are not optimized for mobile and should not actually be used in a mobile project, it can still be convenient to reference the source from a desktop project to re-use code. It is a little tricky to add MX controls to a mobile App because there are many libraries to reference but it can be done.
<!--
	google_ad_client = "pub-9622909715647886";
	google_alternate_color = "FFFFFF";
	google_ad_width = 468;
	google_ad_height = 60;
	google_ad_format = "468x60_as";
	google_ad_type = "text";
	google_ad_channel ="";
	google_color_border = "";
	google_color_link = "";
	google_color_bg = "";
	google_color_text = "";
	google_color_url = "";
	google_ui_features = "rc:0";

	//-->
There is no “official” way to do this because Adobe absolutely does not want you using MX controls in the UI of an AIR mobile app. But to be honest, Spark controls are somewhat lacking and I have “cheated” and used the percent complete loader control in an iOS mobile app before with no ill effects. I think the newer devices are so fast it matters little. Anyway, read on.
In the project explorer right click your mobile project and go to properties.  Select “Flex Build Path” and click the “Add SWC” button on the form. You want to browse to:
C:\Program Files (x86)\Adobe\Adobe Flash Builder 4.6\sdks\flex_sdk_4.6.0.23201\frameworks\libs\mx
Here you need to add “
mx.swc
“.
We are not done yet. Next go up one level to:
C:\Program Files (x86)\Adobe\Adobe Flash Builder 4.6\sdks\flex_sdk_4.6.0.23201\frameworks\libs
And add in “
spark.swc
“, “
sparkskins.swc
” and “
spark_dmv.swc
“.
Now, go up to:
C:\Program Files (x86)\Adobe\Adobe Flash Builder 4.6\sdks\flex_sdk_4.6.0.23201\frameworks\themese\wireframe
And pop in
wireframe.swc
This was written using Flex SDK 4.6 and AIR SDK 3.4, I don’t know if it will be different for you- but it isn’t a problem because you can fix it easily. Simply open up a new blank flex Desktop project and a new blank Flex mobile project and compare what is different in the build path. Add in the difference to the mobile app and you should be set. Again my SDK is likely different from yours so don’t go copying and pasting those paths into explorer.
.entry-content
This entry was posted in
flashbuilder
,
Flex
on
December 27, 2012
by
admin
.
.entry-meta
#post
A component skin system for same source mobile / desktop apps
Leave a reply
.comments-link
.entry-header
Preface and build path requirements to pull this off:
With Adobe AIR you have lots of support for cross platform application development, and with Flex you get an application framework to do this quickly. However the way Flex is constructed with MX controls and Spark controls it makes it difficult to re-use code between a desktop and mobile app.
To simply include the source code from a mobile project even if you are not using all of it you will need to add the mobile components into the build path or else you will not be able to compile.
The inverse is also true. If you want to include the source of a desktop app (e.g. via linking) into a mobile project because you need a few classes you will need to include all of the libraries to do this. Instructions for that are linked (there are many more libraries to include than the inverse).
how to link mobile flex project into desktop
-
http://frameworkhell.com/flex-using-mobile-components-in-a-desktop-app/
how to link desktop flex project into mobile-
Add MX controls to mobile App
A component skin system for same source mobile / desktop apps:
Once this is complete you can take the idea a step further and actually break out areas of the application(s) into components with different skin classes.
Generally for the desktop app I do this by making  panel for the window/ component I want to display. Inside of this I put my re-usable code. For mobile I use the view navigator / pushing views system that Flex supports and simply add the re-usable code the view inside of a container.
The code container I use is extended from
Spark SkinnableComponent.
You may want to try to use a Spark SkinnableContainer, but don’t- you can’t change the layout area the same way and this won’t work.  Then I include the skin class based on some flag I set in the application launcher file. I generally have two or three skin classes: Desktop, Mobile, and Tablet.
For example here is a small Component class that references skin classes based on a flag:
package com.a-r-d.someproject.modules.projectsections.contact
{
   import com.a-r-d.someproject.modules.projectsections.contact.skins.ProjectContactsDesktopSkin;
   import com.a-r-d.someproject.modules.projectsections.contact.skins.ProjectContactsMobileSkin;
   import com.a-r-d.someproject.utils.AppSessionData;
   import com.a-r-d.someproject.utils.MyConstants;
   
   import flash.display.DisplayObjectContainer;
   
   import spark.components.List;
   import spark.components.supportClasses.SkinnableComponent;

   public class ProjectContactsComponent extends SkinnableComponent
   {
      
      [SkinState("default")]
      [SkinState("loading")]
      
      [Event(name="change", type="flash.events.Event")] 
      
      public var projectIData:XML;
      public var compnentData:XML;
      
      [Bindable]
      public var fontSizeNormal:int = 20;
      
      [Bindable]
      private var title:String = "Project Contacts";
      
      [SkinPart(required="true")]
      public var internalContactList:List;
      
      [SkinPart(required="true")]
      public var externalContactList:List;
      
      
      public function ProjectContactsComponent()
      {
         this.percentWidth = 100;
         
         if( AppSessionData.deviceType == MyConstants.DEVICE_TYPE_MOBILE) {
            this.percentHeight = 100;
            
            if(AppSessionData.screen_size_category == MyConstants.DEVICE_SCREEN_SIZE_TINY ) {
               setStyle("skinClass", ProjectContactsMobileSkin);
            } else {
               setStyle("skinClass", ProjectContactsTabletSkin);
            }
         } else {
            setStyle("skinClass", ProjectContactsDesktopSkin);
            this.height = 400; // need this for show/hide effect.
         }
         
         /****
         
         YOUR RE-USABLE LOGIC GOES HERE !!!
         
         ****/
      }
      
      override protected function commitProperties():void { 
         super.commitProperties(); 
      }
      override protected function partAdded(partName:String, instance:Object):void {
         super.partAdded(partName, instance);
      }
      override protected function partRemoved(partName:String, instance:Object):void {
         super.partRemoved(partName, instance);
      }
   }
}
So this has three skin classes it will set based on the screen size and if it is on a mobile device or an a desktop. The class also references a few required layout components:
[SkinPart(required="true")]
public var internalContactList:List;
<!--
	google_ad_client = "pub-9622909715647886";
	google_alternate_color = "FFFFFF";
	google_ad_width = 468;
	google_ad_height = 60;
	google_ad_format = "468x60_as";
	google_ad_type = "text";
	google_ad_channel ="";
	google_color_border = "";
	google_color_link = "";
	google_color_bg = "";
	google_color_text = "";
	google_color_url = "";
	google_ui_features = "rc:0";

	//-->
This, for example, is a required list element- it must be present on any skin class referenced. However on the desktop and tablet versions we have more real estate so I put the two lists side by side, while in the mobile app they are on top of each other. Also all of the heights and widths are relative and percentage based so our components will scale to fit the screens we are targeting.
Now what do the skin classes look like? The skin class is a very simple MXML file with no logic that only lays out the required components. Here is the mobile skin:
<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
      xmlns:s="library://ns.adobe.com/flex/spark" 
      xmlns:mx="library://ns.adobe.com/flex/mx"
      height="100%"
      width="100%"
      >
   <!-- host component -->
   <fx:Metadata>
      [HostComponent("me.a-r-d.someproject.modules.projectsections.contact.ProjectContactsComponent")]
   </fx:Metadata>
   <s:states>
      <s:State name="default"/>
      <s:State name="loading"/>
   </s:states>
   
   <s:Scroller width="100%" height="100%">
      <s:VGroup width="100%" height="100%">
         <s:Spacer height="1%" />
         <s:Label text="Internal Contacts"/>
         <s:List id="internalContactList" borderColor="0x000000" borderVisible="true" height="45%" width="100%"></s:List>
         <s:Spacer height="2%" />
         <s:Label text="External Contacts"/>
         <s:List id="externalContactList"  borderColor="0x000000" borderVisible="true" height="45%" width="100%"></s:List>
      </s:VGroup>
   </s:Scroller>
</s:Skin>
The dekstop skin looks very similar, except for some layout changes:
<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
      xmlns:s="library://ns.adobe.com/flex/spark" 
      xmlns:mx="library://ns.adobe.com/flex/mx"
      height="100%"
      width="100%"
      minHeight="300"
      minWidth="800"
      maxHeight="600"
      maxWidth="1200"
      >
   <!-- host component -->
   <fx:Metadata>
      [HostComponent("me.a-r-d.someproject.modules.projectsections.contact.ProjectContactsComponent")]
   </fx:Metadata>
   <s:states>
      <s:State name="default"/>
      <s:State name="loading"/>
   </s:states>
   
   <s:HGroup width="100%" height="100%">
      <s:VGroup width="50%" height="100%">
         <s:Label  text="Internal Contacts"/>
         <s:List id="internalContactList" borderColor="0x000000" borderVisible="true" height="90%" width="100%"></s:List>
      </s:VGroup>
      <s:VGroup width="50%" height="100%">
         <s:Label text="External Contacts"/>
         <s:List id="externalContactList" borderColor="0x000000" borderVisible="true" height="90%" width="100%"></s:List>
      </s:VGroup>
   </s:HGroup>
</s:Skin>
How Do I use this?
As I mentioned earlier for a desktop app I like to use a panel or something as my container. For the mobile app you will want to create a container (like a Spark BorderContainer) inside of your view to shove it in.
It really is as simple as:
protected function skinnablecontainer1_contentCreationCompleteHandler(event:FlexEvent):void{
   var cont:ProjectContactsComponent = new ProjectContactsComponent();
   cont.projectIData = projectData;
   projectAttributeContainer.addElement(cont);   
}
And somewhere below in the layout for the panel below my buttons I had a container I put it in:
<s:Group id="projectAttributeContainer" width="100%" height="100%" gap="5" ></s:Group>
For mobile it is generally the exact same. Instantiate the component in the creation complete and add it to some other container you can easily manipulate later. (E.g. if you want to refresh the component you can simple remove all from the container and add it again).
Here is what the end result looks like- I put my container a much more complex panel in the desktop version, and pushed a very simple view in the mobile version:
.entry-content
This entry was posted in
flashbuilder
,
Flex
on
December 26, 2012
by
admin
.
.entry-meta
#post
Flex: Using mobile components in a Desktop app
Leave a reply
.comments-link
.entry-header
Using mobile components in a Desktop app is something you have to do occasionally when you are trying to reuse code- fortunately it is relatively easy to do this (opposed to the other way around).
<!--
	google_ad_client = "pub-9622909715647886";
	google_alternate_color = "FFFFFF";
	google_ad_width = 336;
	google_ad_height = 280;
	google_ad_format = "336x280_as";
	google_ad_type = "text";
	google_ad_channel ="";
	google_color_border = "";
	google_color_link = "";
	google_color_bg = "";
	google_color_text = "";
	google_color_url = "";
	google_ui_features = "rc:0";

	//-->
To do this I am starting from Flashbuilder in a “Flex Project” with desktop option selected. With this kind of project simply right click on the project on the and go to “properties”. This will open up a window with a side bar that has many options. Select “Flex Build Path” and click the “Add SWC” button on the form. You want to browse to:
C:\Program Files (x86)\Adobe\Adobe Flash Builder 4.6\sdks\flex_sdk_4.6.0.23201\frameworks\libs\mobile
(You may be using a different SDK that I am, but the path should generally be similar- now select the file “mobilecomponents.swc”. See the image for details.)
Next step is to add the mobile theme. You will have the references in the editor now, but the project wont compile correctly unless you add the mobile theme. To do this go to “Flex Theme” in the same properties window for the project and go to “Import Theme”. You want to import the mobile theme into the project classpath. The path on my machine was
(but again it will different based on what SDK you are using)
:
C:\Program Files (x86)\Adobe\Adobe Flash Builder 4.6\sdks\flex_sdk_4.6.0.23201\frameworks\themes\Mobile
.entry-content
This entry was posted in
flashbuilder
,
Flex
on
December 26, 2012
by
admin
.
.entry-meta
#post
Flash Builder is useless without design view
Leave a reply
.comments-link
.entry-header
Flash Builder is useless without design view. At best. Maybe more like pointless. Don’t upgrade from 4.6 to 4.7 if you actually use / need it.
If you are a programmer that does a lot of little projects using flashbuilder, mostly for in house stuff where there is no designer involved, and thus, no mock-ups and no design to work off of, then this is really horrible. MXML is not as easy to visually layout as HTML/CSS is for most people. I think most developers have been doing HTML/CSS layout for years and can do it in their sleep. Plus we have things like Bootstrap to help us speed things up. But programmatic layout in something unfamiliar and awkward is a huge burden and waste of time between compiling and checking your progress.
So what are the alternatives?
Flash Develop:
Flash develop
.. they also have a
design view plugin
.
This looks like a pretty good guide to help.
Amethyst
Not sure, but
somebody recommended this on SO.
And it looks like there are several other IDEs with AS3 and/or MXML support but nothing else really has “design view”. Soon I’m going to try to do a youtube video where I try out flash develop.
It looks like the guy that made chat roulette used flex and is rightly pissed. Check out this thread filled with some
justified rage on the adobe forums
.
And really here is big take-home message: Flash develop and flashbuilder almost look like an equal product now. Why pay for flash builder at all?
.entry-content
This entry was posted in
AS3
,
flashbuilder
,
Flex
on
December 22, 2012
by
admin
.
.entry-meta
#post
How to send data via POST to a PHP script from a Flex App
Leave a reply
.comments-link
.entry-header
You have to be careful when setting up all of the parameters for an HTTP POST request from Flex. There are a lot of settings that favor XML and can throw you off. To be clear when you are sending parameters via POST, PHP will expect to read something like this:
This is how you want to format your service to get this type of passing:
<s:HTTPService
id="scoreSender"
method="POST"
result="scoreSender_resultHandler(event)"
resultFormat="e4x"
fault="scoreSender_faultHandler(event)"
>
Make sure NOT to specify a content type. It will end up either base 64 encoding it, or encoding your params in XML format which will not appear in the PHP $_POST array.
Then you can manually add all of the parameters like so:
scoreSender.url = Constants.postScoreURL;
var params:Object = new Object();
params["key"] = keyOut;
params["enemiesKilled"] = kills;
params["shotsTaken"] = shots;
params["feetWalked"] = feet;
params["itemsGotten"] = powerups;
params["timeStarted"] = timeStarted;
params["timeEnded"] = timeEnded;
params["deaths"] = playDeaths;
params["points"] = score;
params["name"] = nameEntry.text.replace("&", "").replace("?", "");
scoreSender.send(params);
Finally on the PHP end you can pull them out from the $_POST array:
$kills = $_POST['enemiesKilled'];
$shots = $_POST['shotsTaken'];
$feet = $_POST['feetWalked'];
$items = $_POST['itemsGotten'];
$timestart = $_POST['timeStarted'];
$timeended = $_POST['timeEnded'];
$deaths = $_POST['deaths'];
$points = $_POST['points'];
$name = $_POST['name'];
.entry-content
This entry was posted in
Flex
on
September 2, 2012
by
admin
.
.entry-meta
#post
How to pan screen for SoftKeyboard for Flex mobile apps.
Leave a reply
.comments-link
.entry-header
In a mobile app where you are using the soft keyboard to input text into a textbox or textarea if you have the textbox near the bottom of the screen you will need to scroll the screen to view the text input area while you are typing. Here I will show to pan the screen for SoftKeyboard in the app settings.
In the main app MXML file you can change the soft keyboard behavior element. “pan” will enable use easiest.
true
true
pan
Next in APP level MXML file you will want set the soft keyboard behavior:
xmlns:fx="http://ns.adobe.com/mxml/2009"
xmlns:s="library://ns.adobe.com/flex/spark" firstView="views.DodgeABroHomeView" applicationDPI="160"
applicationComplete="tabbedviewnavigatorapplication1_applicationCompleteHandler(event)"
frameRate="40"
resizeForSoftKeyboard="true"
>
Finally in the view where you will have the actual text input control you can use a scroller to specify exactly where you want to scroll too. However with the above settings, it should not be necessary. This is only if you want to override the normal default behavior built into Flex with the above setting.
.entry-content
This entry was posted in
Flex
on
September 2, 2012
by
admin
.
.entry-meta
#post
Flex ViewNavigator screen resolution reference
Leave a reply
.comments-link
.entry-header
>In a Flex ViewNavigator application you have a ton of confusing options for getting the current screen dimensions. Because there is a menu bar at the top of the screen- so you will actually get a short height- I found that using:
var screenYAxisMax:int = navigator.measuredHeight;
var screenXAxisMax:int = navigator.measuredWidth;
Will usually get me what I want on my iPhone 4. I have not yet tried this on an Android device but will update this when I do.
But for reference here is trace for all of the options I could find while debugging on my device for a Flex ViewNavigator Mobile app:
.entry-content
This entry was posted in
Flex
on
August 25, 2012
by
admin
.
.entry-meta
#post
Multiple device screen resolution for Flex Mobile Apps – Flashbuilder 4.6
Leave a reply
.comments-link
.entry-header
Here is a problem I ran into the other day: I wrote an app for iPhone 3gs with all the setting specifically for it, then later wanted to deploy it to a Kindle Fire. Now Kindle Fire is firstly and Android device and secondly it has some fairly odd dimensions:
Various Screen resolutions for comparison:

ndle fire:
width = 600
height = 1024
dpi = 160

iphone 3gs:
dpi = 163
width = 320
height = 480

iphone 4
dpi = 326
width = 640
height = 960
What I wanted was a super simple way to just stretch the application. To do this I needed to find out what resolution the app was set for, what resolution the new deployment should be, and what the scale factor would be. Now this was just for a little thing I was writing for testing purposes and I didn’t really care about how it came out looking.
I am using a tabbed navigator application in this example. It is something that I use fairly often for all the time it saves. Basically in the application file I use the applicationComplete event and then specify a scale for the X and Y resolutions based on what it was written for, and what the current detected resolution is:
For the application tag:
<?xml version="1.0" encoding="utf-8"?>
<s:TabbedViewNavigatorApplication 
		xmlns:fx="http://ns.adobe.com/mxml/2009" 
	 	xmlns:s="library://ns.adobe.com/flex/spark" 
	 	skinClass="skins.BgSkinClass"			
	 	applicationComplete="tabbedviewnavigatorapplication1_applicationCompleteHandler(event)"
		applicationDPI="160"
	 	>
And then in the Script tag below:
<fx:Script>
	<![CDATA[
	import mx.events.FlexEvent;

	protected function tabbedviewnavigatorapplication1_applicationCompleteHandler(event:FlexEvent):void
	{
		// we can set scale based on application window size
		// We know this is the current size.
		// For iphone 4 projects: 
		var baseX:int = 640;
		var baseY:int = 960;
						
		// for kindle fire x = 600, y - 1024. 
		var destinationX:int = Capabilities.screenResolutionX;
		var destinationY:int = Capabilities.screenResolutionY;

		var scaleFactorX:Number = destinationX / baseX;
		var scaleFactorY:Number = destinationY / baseY;

		tabbedNavigator.scaleX = scaleFactorX;
		tabbedNavigator.scaleY = scaleFactorY;
	}

	]]>
</fx:Script>
This will scale up your application the fill the screen on the device. Make sure you make this a separate application file in your project and only build it for releases because otherwise when you are debugging on your computer it will stretch to the full size of your screen!
.entry-content
This entry was posted in
Flex
on
August 18, 2012
by
admin
.
.entry-meta
#post
How to make a repeating background bitmap image on Flex mobile (spark / flashbuilder 4.6) application.
Leave a reply
.comments-link
.entry-header
There is no default CSS attribute in any of the basic application types for flex. So to create a background image that covers your entire application you will have to resort some tricks. And the worst part is that it is VERY different to do this on a mobile application. So I am going to show how to do this with a tabbed navigator application with a bitmap fill.
To be clear here are different cases:
This guy explains how to do it on a regular desktop/ web based flex app. (See the comments for more detail).
This guy explains how to do it with a single image on a flex mobile app (but using a ViewNavigatorApplication).
So first here is my application file. Note I used a skinClass attribute to ref a custom skin. This is where the magic happens. Additionally you need to override the backgrounds in the other styles as needed so that your background image will show through. Otherwise you will have ugly white backgrounds on your labels and such.
<?xml version="1.0" encoding="utf-8"?>
<s:TabbedViewNavigatorApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
      xmlns:s="library://ns.adobe.com/flex/spark" applicationDPI="160" width="100%" height="100%"
      skinClass="skins.BgSkinClass"
      >
	
	<fx:Style source="uptimeChecker.css"/>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		
		
		s|View {
			backgroundAlpha: 0;
		}
		
		s|Label {
			backgroundAlpha: 0;
		}
		
		s|List {
			backgroundAlpha: 0;
		}
	</fx:Style>
	
	<s:ViewNavigator label="Quick Check" width="100%" height="100%" firstView="views.QuickCheckView" />
	<s:ViewNavigator label="Check List" width="100%" height="100%" firstView="views.CheckListView"/>
	<s:ViewNavigator label="Edit List" width="100%" height="100%" firstView="views.EditListView" />

	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
</s:TabbedViewNavigatorApplication>
Now we get the actual skin. This is actually just an actionscript class thrown in a package called “skins”. Everything is created programatically with actionscript so there are a lot of imports. Also notice we do: “extends TabbedViewNavigatorApplicationSkin”. If you are doing a different application base type you will need to change that! You should also be able to see where I set the source for my repeating fill image.
package skins
{
    import mx.core.BitmapAsset;
    import mx.graphics.BitmapFill;
    import mx.graphics.BitmapFillMode;

    import spark.components.Group;
    import spark.components.Image;
    import spark.primitives.BitmapImage;
    import spark.primitives.Rect;
    import spark.skins.mobile.TabbedViewNavigatorApplicationSkin;

    public class BgSkinClass extends TabbedViewNavigatorApplicationSkin {
        private var image:Image;

        [Embed(source="/assets/back.png")]
        private var background:Class;

        private var group:Group = new Group();

        public function BgSkinClass() {
            super();
        }

        override protected function drawBackground(w:Number, h:Number):void{
            super.drawBackground(w,h);
            group.height=h;
            group.width=w;
        }

        override protected function createChildren():void {

            var rec:Rect = new Rect();
            var bitmapFill:BitmapFill = new BitmapFill();
            rec.percentHeight=100;
            rec.percentWidth=100;
            bitmapFill.source =(new background() as BitmapAsset);
            bitmapFill.fillMode = BitmapFillMode.REPEAT;
            rec.fill = bitmapFill;

            group.addElement(rec);
            this.addChild(group);
            super.createChildren();

        }
    }
}
If you just came for the fix it should be fairly straightforward to simply copy the code and fix the naming of things. So go ahead and copy paste!
Example:
#gallery-1 {
				margin: auto;
			}
			#gallery-1 .gallery-item {
				float: left;
				margin-top: 10px;
				text-align: center;
				width: 33%;
			}
			#gallery-1 img {
				border: 2px solid #cfcfcf;
			}
			#gallery-1 .gallery-caption {
				margin-left: 0;
			}
see gallery_shortcode() in wp-includes/media.php
.entry-content
This entry was posted in
Flex
on
August 11, 2012
by
admin
.
.entry-meta
#post
Styling with CSS and other tricks on Flex Mobile apps (Flashbuilder 4.6)
Leave a reply
.comments-link
.entry-header
What I set out to do here is to make a very basic but useful guide to styling a flex mobile app. I will provide an annotated style sheet and some tricks about using icons in the basic Spark components.
First I am starting with a tabbed navigator application. Lets follow along with
this example
and update the CSS for all of the base components.
Make sure you have this in your app mxml file:
<fx:Style source="yourAppName.css"/>
Now lets go over the CSS for a basic tabbed navigator app. Remember also at any time you can check the docs for possible styling options.
For example here the docs for the action bar.
I ran into a problem trying to embed a repeating background image for my application and ended up trying to look in
the docs for tabbed navigator application
but it turns out background-image is not a supported CSS attribute.
To make a background image in your application you have to do some really crazy stuff. I will make a whole blog post on it later.
Here is some basic CSS for a flex mobile app wth tabbed navigator.
/* CSS file */
@namespace s "library://ns.adobe.com/flex/spark";


/* Fairly obvious what this is */
global
{
	symbol-color: #000000;
	chrome-color: #B5DAFF;
	font-weight: bold;
	
	/* background color of each view */
	background-color:#ffffff;
	
	vertical-align: top;
	text-align: left;
	font-size: 16;
	/* content-background-alpha: 0.62; */
}

/** this is the bar the top of the app **/
s|ActionBar{
	chromeColor:#B5DAFF; /* more like background color */
	titleAlign:center; 
	defaultButtonAppearance: beveled;
}

/** Lists obviously **/
s|List{
	color:#B5DAFF;
	chromeColor:#B5DAFF;
}


/* This is the styling of the tabbed navigator */
s|TabbedViewNavigator #tabBar { 
	chromeColor: #4D6DFF; /* color of background on buttons */
	color: #ffffff; /* color of text on tab names */
	textDecoration:underline; 
}
.entry-content
This entry was posted in
Flex
on
August 11, 2012
by
admin
.
.entry-meta
#post
Post navigation
←
Older posts
#nav-below .navigation
#content
#primary
Search for:
Recent Posts
Flex: Add MX controls to mobile App
A component skin system for same source mobile / desktop apps
Flex: Using mobile components in a Desktop app
Clojure Adventures Part 1
Flash Builder is useless without design view
Recent Comments
brand
on
Apache Axis 1.4 Tutorial – Making a Java Webservice with Tomcat 6. Part 1.
Archives
December 2012
September 2012
August 2012
Categories
AS3
Django
flashbuilder
Flex
Java
jQuery
Python
Uncategorized
Web Services
Meta
Log in
Entries
RSS
Comments
RSS
WordPress.org
#secondary
#main .wrapper
Proudly powered by WordPress
.site-info
#colophon
#page
//<![CDATA[
SyntaxHighlighter.all();
//]]>
