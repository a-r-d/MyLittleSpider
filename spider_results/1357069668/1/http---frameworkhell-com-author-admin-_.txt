html
[if IE 7]>
<html class="ie ie7" lang="en-US" prefix="og: http://ogp.me/ns#">
<![endif]
[if IE 8]>
<html class="ie ie8" lang="en-US" prefix="og: http://ogp.me/ns#">
<![endif]
[if !(IE 7) | !(IE 8)  ]><!
<![endif]
admin, Author at Framework Hell
[if lt IE 9]>
<script src="http://frameworkhell.com/wp-content/themes/twentytwelve/js/html5.js" type="text/javascript"></script>
<![endif]
This site is optimized with the Yoast WordPress SEO plugin v1.3.4.1 - http://yoast.com/wordpress/seo/
/ Yoast WordPress SEO plugin.
[if lt IE 9]>
<link rel='stylesheet' id='twentytwelve-ie-css'  href='http://frameworkhell.com/wp-content/themes/twentytwelve/css/ie.css?ver=20121010' type='text/css' media='all' />
<![endif]
.ads {
			position: relative;
			text-align: center;		
			clear: both;
		}
.recentcomments a{display:inline !important;padding:0 !important;margin:0 !important;}
.site-title a,
		.site-description {
			color: #b21515 !important;
		}
body.custom-background { background-color: #e6e6e6; background-image: url('http://frameworkhell.com/wp-content/uploads/2012/12/py+bw_logo_red_140.png'); background-repeat: repeat; background-position: top left; background-attachment: fixed; }
Google Analytics Tracking by Google Analyticator 6.4.1: http://www.videousermanuals.com/google-analyticator/
var analyticsFileTypes = [''];
	var analyticsEventTracking = 'enabled';
var _gaq = _gaq || [];
	_gaq.push(['_setAccount', 'UA-34027872-1 ']);
        _gaq.push(['_addDevId', 'i9k95']); // Google Analyticator App ID with Google 
        
	_gaq.push(['_trackPageview']);

	(function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
	})();
Framework Hell
Frameworks can be hellish- I try to help.
Menu
Skip to content
blog
about me
links
projects
#site-navigation
#masthead
Author Archives:
admin
.archive-header
Post navigation
←
Older posts
#nav-above .navigation
Flex: Add MX controls to mobile App
Leave a reply
.comments-link
.entry-header
<!--
	google_ad_client = "pub-9622909715647886";
	google_alternate_color = "FFFFFF";
	google_ad_width = 336;
	google_ad_height = 280;
	google_ad_format = "336x280_as";
	google_ad_type = "text";
	google_ad_channel ="";
	google_color_border = "";
	google_color_link = "";
	google_color_bg = "";
	google_color_text = "";
	google_color_url = "";
	google_ui_features = "rc:0";

	//-->
In Flash-builder when you start a mobile project it will restrict you to only Spark controls. However, even though MX control are not optimized for mobile and should not actually be used in a mobile project, it can still be convenient to reference the source from a desktop project to re-use code. It is a little tricky to add MX controls to a mobile App because there are many libraries to reference but it can be done.
There is no “official” way to do this because Adobe absolutely does not want you using MX controls in the UI of an AIR mobile app. But to be honest, Spark controls are somewhat lacking and I have “cheated” and used the percent complete loader control in an iOS mobile app before with no ill effects. I think the newer devices are so fast it matters little. Anyway, read on.
In the project explorer right click your mobile project and go to properties.  Select “Flex Build Path” and click the “Add SWC” button on the form. You want to browse to:
C:\Program Files (x86)\Adobe\Adobe Flash Builder 4.6\sdks\flex_sdk_4.6.0.23201\frameworks\libs\mx
Here you need to add “
mx.swc
“.
We are not done yet. Next go up one level to:
C:\Program Files (x86)\Adobe\Adobe Flash Builder 4.6\sdks\flex_sdk_4.6.0.23201\frameworks\libs
And add in “
spark.swc
“, “
sparkskins.swc
” and “
spark_dmv.swc
“.
Now, go up to:
C:\Program Files (x86)\Adobe\Adobe Flash Builder 4.6\sdks\flex_sdk_4.6.0.23201\frameworks\themese\wireframe
And pop in
wireframe.swc
This was written using Flex SDK 4.6 and AIR SDK 3.4, I don’t know if it will be different for you- but it isn’t a problem because you can fix it easily. Simply open up a new blank flex Desktop project and a new blank Flex mobile project and compare what is different in the build path. Add in the difference to the mobile app and you should be set. Again my SDK is likely different from yours so don’t go copying and pasting those paths into explorer.
.entry-content
This entry was posted in
flashbuilder
,
Flex
on
December 27, 2012
by
admin
.
.entry-meta
#post
A component skin system for same source mobile / desktop apps
Leave a reply
.comments-link
.entry-header
Preface and build path requirements to pull this off:
With Adobe AIR you have lots of support for cross platform application development, and with Flex you get an application framework to do this quickly. However the way Flex is constructed with MX controls and Spark controls it makes it difficult to re-use code between a desktop and mobile app.
To simply include the source code from a mobile project even if you are not using all of it you will need to add the mobile components into the build path or else you will not be able to compile.
The inverse is also true. If you want to include the source of a desktop app (e.g. via linking) into a mobile project because you need a few classes you will need to include all of the libraries to do this. Instructions for that are linked (there are many more libraries to include than the inverse).
how to link mobile flex project into desktop
-
http://frameworkhell.com/flex-using-mobile-components-in-a-desktop-app/
how to link desktop flex project into mobile-
Add MX controls to mobile App
A component skin system for same source mobile / desktop apps:
Once this is complete you can take the idea a step further and actually break out areas of the application(s) into components with different skin classes.
Generally for the desktop app I do this by making  panel for the window/ component I want to display. Inside of this I put my re-usable code. For mobile I use the view navigator / pushing views system that Flex supports and simply add the re-usable code the view inside of a container.
The code container I use is extended from
Spark SkinnableComponent.
You may want to try to use a Spark SkinnableContainer, but don’t- you can’t change the layout area the same way and this won’t work.  Then I include the skin class based on some flag I set in the application launcher file. I generally have two or three skin classes: Desktop, Mobile, and Tablet.
For example here is a small Component class that references skin classes based on a flag:
package com.a-r-d.someproject.modules.projectsections.contact
{
   import com.a-r-d.someproject.modules.projectsections.contact.skins.ProjectContactsDesktopSkin;
   import com.a-r-d.someproject.modules.projectsections.contact.skins.ProjectContactsMobileSkin;
   import com.a-r-d.someproject.utils.AppSessionData;
   import com.a-r-d.someproject.utils.MyConstants;
   
   import flash.display.DisplayObjectContainer;
   
   import spark.components.List;
   import spark.components.supportClasses.SkinnableComponent;

   public class ProjectContactsComponent extends SkinnableComponent
   {
      
      [SkinState("default")]
      [SkinState("loading")]
      
      [Event(name="change", type="flash.events.Event")] 
      
      public var projectIData:XML;
      public var compnentData:XML;
      
      [Bindable]
      public var fontSizeNormal:int = 20;
      
      [Bindable]
      private var title:String = "Project Contacts";
      
      [SkinPart(required="true")]
      public var internalContactList:List;
      
      [SkinPart(required="true")]
      public var externalContactList:List;
      
      
      public function ProjectContactsComponent()
      {
         this.percentWidth = 100;
         
         if( AppSessionData.deviceType == MyConstants.DEVICE_TYPE_MOBILE) {
            this.percentHeight = 100;
            
            if(AppSessionData.screen_size_category == MyConstants.DEVICE_SCREEN_SIZE_TINY ) {
               setStyle("skinClass", ProjectContactsMobileSkin);
            } else {
               setStyle("skinClass", ProjectContactsTabletSkin);
            }
         } else {
            setStyle("skinClass", ProjectContactsDesktopSkin);
            this.height = 400; // need this for show/hide effect.
         }
         
         /****
         
         YOUR RE-USABLE LOGIC GOES HERE !!!
         
         ****/
      }
      
      override protected function commitProperties():void { 
         super.commitProperties(); 
      }
      override protected function partAdded(partName:String, instance:Object):void {
         super.partAdded(partName, instance);
      }
      override protected function partRemoved(partName:String, instance:Object):void {
         super.partRemoved(partName, instance);
      }
   }
}
So this has three skin classes it will set based on the screen size and if it is on a mobile device or an a desktop. The class also references a few required layout components:
<!--
	google_ad_client = "pub-9622909715647886";
	google_alternate_color = "FFFFFF";
	google_ad_width = 468;
	google_ad_height = 60;
	google_ad_format = "468x60_as";
	google_ad_type = "text";
	google_ad_channel ="";
	google_color_border = "";
	google_color_link = "";
	google_color_bg = "";
	google_color_text = "";
	google_color_url = "";
	google_ui_features = "rc:0";

	//-->
[SkinPart(required="true")]
public var internalContactList:List;
This, for example, is a required list element- it must be present on any skin class referenced. However on the desktop and tablet versions we have more real estate so I put the two lists side by side, while in the mobile app they are on top of each other. Also all of the heights and widths are relative and percentage based so our components will scale to fit the screens we are targeting.
Now what do the skin classes look like? The skin class is a very simple MXML file with no logic that only lays out the required components. Here is the mobile skin:
<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
      xmlns:s="library://ns.adobe.com/flex/spark" 
      xmlns:mx="library://ns.adobe.com/flex/mx"
      height="100%"
      width="100%"
      >
   <!-- host component -->
   <fx:Metadata>
      [HostComponent("me.a-r-d.someproject.modules.projectsections.contact.ProjectContactsComponent")]
   </fx:Metadata>
   <s:states>
      <s:State name="default"/>
      <s:State name="loading"/>
   </s:states>
   
   <s:Scroller width="100%" height="100%">
      <s:VGroup width="100%" height="100%">
         <s:Spacer height="1%" />
         <s:Label text="Internal Contacts"/>
         <s:List id="internalContactList" borderColor="0x000000" borderVisible="true" height="45%" width="100%"></s:List>
         <s:Spacer height="2%" />
         <s:Label text="External Contacts"/>
         <s:List id="externalContactList"  borderColor="0x000000" borderVisible="true" height="45%" width="100%"></s:List>
      </s:VGroup>
   </s:Scroller>
</s:Skin>
The dekstop skin looks very similar, except for some layout changes:
<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
      xmlns:s="library://ns.adobe.com/flex/spark" 
      xmlns:mx="library://ns.adobe.com/flex/mx"
      height="100%"
      width="100%"
      minHeight="300"
      minWidth="800"
      maxHeight="600"
      maxWidth="1200"
      >
   <!-- host component -->
   <fx:Metadata>
      [HostComponent("me.a-r-d.someproject.modules.projectsections.contact.ProjectContactsComponent")]
   </fx:Metadata>
   <s:states>
      <s:State name="default"/>
      <s:State name="loading"/>
   </s:states>
   
   <s:HGroup width="100%" height="100%">
      <s:VGroup width="50%" height="100%">
         <s:Label  text="Internal Contacts"/>
         <s:List id="internalContactList" borderColor="0x000000" borderVisible="true" height="90%" width="100%"></s:List>
      </s:VGroup>
      <s:VGroup width="50%" height="100%">
         <s:Label text="External Contacts"/>
         <s:List id="externalContactList" borderColor="0x000000" borderVisible="true" height="90%" width="100%"></s:List>
      </s:VGroup>
   </s:HGroup>
</s:Skin>
How Do I use this?
As I mentioned earlier for a desktop app I like to use a panel or something as my container. For the mobile app you will want to create a container (like a Spark BorderContainer) inside of your view to shove it in.
It really is as simple as:
protected function skinnablecontainer1_contentCreationCompleteHandler(event:FlexEvent):void{
   var cont:ProjectContactsComponent = new ProjectContactsComponent();
   cont.projectIData = projectData;
   projectAttributeContainer.addElement(cont);   
}
And somewhere below in the layout for the panel below my buttons I had a container I put it in:
<s:Group id="projectAttributeContainer" width="100%" height="100%" gap="5" ></s:Group>
For mobile it is generally the exact same. Instantiate the component in the creation complete and add it to some other container you can easily manipulate later. (E.g. if you want to refresh the component you can simple remove all from the container and add it again).
Here is what the end result looks like- I put my container a much more complex panel in the desktop version, and pushed a very simple view in the mobile version:
.entry-content
This entry was posted in
flashbuilder
,
Flex
on
December 26, 2012
by
admin
.
.entry-meta
#post
Flex: Using mobile components in a Desktop app
Leave a reply
.comments-link
.entry-header
Using mobile components in a Desktop app is something you have to do occasionally when you are trying to reuse code- fortunately it is relatively easy to do this (opposed to the other way around).
To do this I am starting from Flashbuilder in a “Flex Project” with desktop option selected. With this kind of project simply right click on the project on the and go to “properties”. This will open up a window with a side bar that has many options. Select “Flex Build Path” and click the “Add SWC” button on the form. You want to browse to:
<!--
	google_ad_client = "pub-9622909715647886";
	google_alternate_color = "FFFFFF";
	google_ad_width = 468;
	google_ad_height = 60;
	google_ad_format = "468x60_as";
	google_ad_type = "text";
	google_ad_channel ="";
	google_color_border = "";
	google_color_link = "";
	google_color_bg = "";
	google_color_text = "";
	google_color_url = "";
	google_ui_features = "rc:0";

	//-->
C:\Program Files (x86)\Adobe\Adobe Flash Builder 4.6\sdks\flex_sdk_4.6.0.23201\frameworks\libs\mobile
(You may be using a different SDK that I am, but the path should generally be similar- now select the file “mobilecomponents.swc”. See the image for details.)
Next step is to add the mobile theme. You will have the references in the editor now, but the project wont compile correctly unless you add the mobile theme. To do this go to “Flex Theme” in the same properties window for the project and go to “Import Theme”. You want to import the mobile theme into the project classpath. The path on my machine was
(but again it will different based on what SDK you are using)
:
C:\Program Files (x86)\Adobe\Adobe Flash Builder 4.6\sdks\flex_sdk_4.6.0.23201\frameworks\themes\Mobile
.entry-content
This entry was posted in
flashbuilder
,
Flex
on
December 26, 2012
by
admin
.
.entry-meta
#post
Clojure Adventures Part 1
Leave a reply
.comments-link
.entry-header
Clojure Adventures Part 1:
Beginings (linux):
Install Clojure.
apt-get install clojure
Install Leiningen (like a clojure swiss army knife + package manager).
apt-get install leiningen
Install a clojure package to get started. You will now be able to access this program from the command line by calling ‘lein’. Firstly, I am trying to build a little crawler and I’m going to use enlive to do it. So the enlive tutorial (https://github.com/swannodette/enlive-tutorial).
First they say to clone the repo for enlive. Ok.
mkdir enlive-repo
cd enlive-repo
git clone git://github.com/swannodette/enlive-tutorial.git
From here on I am following the tutorial. Getting the dependencies with ‘lein deps’ and launching the repl in this location with ‘lein repl’.
Holy crap ‘lein deps’ just downloaded megs worth of shit. So what is this doing? It is looking at that project.clj file and downloading all of the dependencies listed here:
(defproject enlive-tutorial "0.1.0"
:description "Enlive Tutorial"
:dependencies [[org.clojure/clojure "1.2.0"]
[org.clojure/clojure-contrib "1.2.0"]
[enlive "1.0.0-SNAPSHOT"]
[ring "0.2.5"]
[net.cgrand/moustache "1.0.0-SNAPSHOT"]]
:dev-dependencies [[swank-clojure "1.3.0-SNAPSHOT"]]
:source-path "src")
For some reason it needs clojure 1.2 idk.
Anyway, then you can go any scrape Hacker News and the New York Times. But now you want to start your own project. How does this work? Okay, so lets make a new project.
mkdir crawler1
Then I copy over the old project.clj file from the example and change the name and version number. Lets leave the dependencies the same and the source path can be left alone as well.
mkdir src
mkdir src/tests
I run ‘lein deps’ and leiningen copies over the libs I need into this new project dir. I go ahead and knock into ‘lein repl’. I notice it says server started on localhost port 19491 so it looks like ring is working well.
Okay, so I make a new file caled test1.clj underneath src/test and add some code. I put some code in this file based off of what the tutorial says and what
francis wolke
sent me earlier.
; scraper 1
(ns test.test1
(:require [net.cgrand.enlive-html :as html]))
(def urls ["http://www.a-r-d.me" "http://www.frameworkhell.com"])
(defn fetch-url [url]
(html/html-resource (java.net.URL. url)))
(defn all-links-pls [url]
(map html/text (html/select (fetch-url url) [:a])))
So now in the repl I can load this and try to run it. I do something like:
user=> (load "test/test1")
nil
user=> (in-ns 'test.test1)
#
test.test1=> urls
["http://www.a-r-d.me" "http://www.frameworkhell.com"]
Then I try to walk into that namespace and call a var name to see if it is ok. It works, so now I can try to run some of that code that I put in the file. So first I play around to make sure it is working:
test.test1=> (all-links-pls “http://a-r-d.me”)
(“me” “contact” “about” “research / publications” “blog” “\n\t\t\t\t\t\t\t\t\tphoto” “github account” “youtube account (inorganic chem)” “jQuery Plugins” “Word Swap” “Simple Timer” “Numbers Everywhere: numBG.js” “Planet Menu” “Web Projects” “x01 – a pastebin with comments” “trade watch” “waanoo” “Terminal Buster” “rrg climbing spots”)
test.test1=> (all-links-pls (first urls))
(“me” “contact” “about” “research / publications” “blog” “\n\t\t\t\t\t\t\t\t\tphoto” “github account” “youtube account (inorganic chem)” “jQuery Plugins” “Word Swap” “Simple Timer” “Numbers Everywhere: numBG.js” “Planet Menu” “Web Projects” “x01 – a pastebin with comments” “trade watch” “waanoo” “Terminal Buster” “rrg climbing spots”)
(I truncated some of the results so it wasn’t so large). Now that worked! Cool! So now what do we want to do? Well of course we should actually try to get the ‘href’ attribute to the link tags. So lets do that… next time.
.entry-content
This entry was posted in
Uncategorized
on
December 26, 2012
by
admin
.
.entry-meta
#post
Flash Builder is useless without design view
Leave a reply
.comments-link
.entry-header
Flash Builder is useless without design view. At best. Maybe more like pointless. Don’t upgrade from 4.6 to 4.7 if you actually use / need it.
If you are a programmer that does a lot of little projects using flashbuilder, mostly for in house stuff where there is no designer involved, and thus, no mock-ups and no design to work off of, then this is really horrible. MXML is not as easy to visually layout as HTML/CSS is for most people. I think most developers have been doing HTML/CSS layout for years and can do it in their sleep. Plus we have things like Bootstrap to help us speed things up. But programmatic layout in something unfamiliar and awkward is a huge burden and waste of time between compiling and checking your progress.
So what are the alternatives?
Flash Develop:
Flash develop
.. they also have a
design view plugin
.
This looks like a pretty good guide to help.
Amethyst
Not sure, but
somebody recommended this on SO.
And it looks like there are several other IDEs with AS3 and/or MXML support but nothing else really has “design view”. Soon I’m going to try to do a youtube video where I try out flash develop.
It looks like the guy that made chat roulette used flex and is rightly pissed. Check out this thread filled with some
justified rage on the adobe forums
.
And really here is big take-home message: Flash develop and flashbuilder almost look like an equal product now. Why pay for flash builder at all?
.entry-content
This entry was posted in
AS3
,
flashbuilder
,
Flex
on
December 22, 2012
by
admin
.
.entry-meta
#post
Panel Manager Class for an Air Desktop App
Leave a reply
.comments-link
.entry-header
I’m working on a desktop app that uses a bunch of non-modal panels to view data. To help with this I wrote a panel manager class for an air desktop app. Let me give you a little demo of what I mean.
In my main application file I have something like this:
<s:SkinnableContainer id="mainContainer" x="0" y="0" width="100%" height="100%">
</s:SkinnableContainer>
To this “mainContainer” I am going to add all of my other Panels, SkinnableContainers, BorderContainers and other things. Mostly I am using panels lately because they have a nice title bar and shadow effects. But anyway, you may do something like this.
var mypanel:Panel = new Panel();
mainContainer.addElement(mypanel);
But when you drill down really far and have panels opening panels you have a problem when it come to management of all of your “windows”. This class should help alleviate things:
package me.ard.utils
{
    import flash.utils.getDefinitionByName;
    import flash.utils.getQualifiedClassName;
    import mx.core.IVisualElement;
    import spark.components.SkinnableContainer;

    public class MyGUIManager
    {
        /*****************************************************
         *     Window object refs
         */
        // This is the reference to the main window container where all windows are managed.
        public static var window_container:SkinnableContainer = null;
        public static var menu_bar_height_offset:Number = 30;
        
        // holds all windows
        public static var all_windows_array:Array = [];
        
        /********************************************************
         *     Window manipulation methods.
         */
        // move z-index of the windows/ manipulate windows.
        public static function moveWindowToBottom(elem:Object):void {
            try {
                window_container.setElementIndex(IVisualElement(elem), 0);
            }catch( e:Error ) {
                trace("Error bringing IVisualElement to bot: " + e.message);
            }
        }
        public static function moveWindowToTop(elem:Object):void {
            try {
                window_container.setElementIndex(IVisualElement(elem), window_container.numElements - 1);
            }catch( e:Error ) {
                trace("Error bringing IVisualElement to top: " + e.message);
            }
        }
        public static function centerWindow(elem:Object):void {
            try {
                var vis:IVisualElement = IVisualElement(elem);
                vis.x = window_container.width / 2 - vis.width / 2;
                vis.y = window_container.height / 2 - vis.height / 2;
            } catch ( e:Error ) {
                trace("Error centering window (center): " + e.message);
            }
        }
        public static function moveWindowToCorner(elem:Object):void {
            try {
                var vis:IVisualElement = IVisualElement(elem);
                vis.y = menu_bar_height_offset;
                vis.x = 0;
            } catch ( e:Error ) {
                trace("Error moving window (to corner): " + e.message);
            }
        }
        public static function moveWindowSetOnTop(elem:Object):void {
            try {
                var vis:IVisualElement = IVisualElement(elem);
                vis.width = window_container.width;
                vis.x = 0;
                vis.y = 0;
            } catch ( e:Error ) {
                trace("Error moving window (set on top)s: " + e.message);
            }
        }
        
        // add to container
        public static function addWindow(elem:Object):void {
            try {
                var vis:IVisualElement = IVisualElement(elem);
                window_container.addElement(vis);
                all_windows_array.push(vis);
            } catch( e:Error ) {
                trace("Failed to add the window- " + e.message);    
            }
        }
        
        // manipulate visiblity
        public static function showWindow(elem:Object):void {
            try {
                for (var i:int = 0; i < all_windows_array.length; i++) {
                    if( elem == all_windows_array[i] ) {
                        all_windows_array[i].visible = true;
                    }
                }
            } catch (e:Error) {
                trace("Fail to show window: " + e.message);
            }
        }
        public static function showAllHiddenWindows():void {
            try {
                for (var i:int = 0; i < all_windows_array.length; i++) {
                    all_windows_array[i].visible = true;
                }
            } catch (e:Error) {
                trace("Fail to show all windows: " + e.message);
            }
        }
        public static function hideWindow(elem:Object):void {
            try {
                for (var i:int = 0; i < all_windows_array.length; i++) {
                    if( elem == all_windows_array[i] ) {
                        all_windows_array[i].visible = false;
                    }
                }
            } catch (e:Error) {
                trace("Fail to hide window: " + e.message);
            }
        }
        public static function hideAllWindows():void {
            try {
                for (var i:int = 0; i < all_windows_array.length; i++) {
                    all_windows_array[i].visible = false;
                }
            } catch (e:Error) {
                trace("Fail to hide all windows: " + e.message);
            }
        }
        
        // remove from container.
        public static function closeSingleWindow(obj:Object):void {
            try {
                for (var i:int = 0; i < all_windows_array.length; i++) {
                    if(all_windows_array[i] == obj ) {
                        window_container.removeElement(all_windows_array[i]);
                        all_windows_array.splice(i, 1);
                        break;
                    }
                }    
            } catch (e:Error) {
                trace("Fail to close window-" +  e.message);
            }
        }
        public static function closeAllWindows():void {        
            try {
                for (var i:int = 0; i < all_windows_array.length; i++) {
                    window_container.removeElement(all_windows_array[i]);
                }
                all_windows_array = [];
            } catch (e:Error) {
                trace("Fail to close projects: " + e.message);
            }
        }
        public static function closeAllWindowsTyped(type:Object):void {
            try {
                var save_arr:Array = [];
                for (var i:int = 0; i < all_windows_array.length; i++) {
                    if( all_windows_array[i] is getClass(type)) {
                        window_container.removeElement(all_windows_array[i]);
                    } else {
                        save_arr.push(all_windows_array[i]);
                    }
                }
                all_windows_array = save_arr; // only save not matched.
            } catch (e:Error) {
                trace("Fail to close projects: " + e.message);
            }
        }

        /******************************************/
        // internal clean up/ utils
        /******************************************/
        private static function getClass(obj:Object):Class {
            return Class(getDefinitionByName(getQualifiedClassName(obj)));
        }

        /*****************************************/
        public function MyGUIManager()
        {
        }
    }
}
So how do you use this? First thing is you want to assign the main container to MyGUIManager.window_container like:
MyGUIManager.window_container = mainContainer;
Now when you add windows and remove windows you can do it from anywhere in the application without having to worry about bubbling events all the way up the application container level and having to respond to them there. For example you can do this:
var p:Panel = new Panel();
MyGUIManager.addWindow(p);
MyGUIManager.centerWindow(p);

// then later on- like in a close button handler inside of the actual panel:
private function closeThisPanelButton(e:MouseEvent):void {
    MyGUIManager.closeSingleWindow(this);
}
Its much easier when you can simple use the 'this' keyword to close the window and remove it from the container- rather than having to bubble events up.
.entry-content
This entry was posted in
AS3
on
December 22, 2012
by
admin
.
.entry-meta
#post
Apache Axis 1.4 Tutorial – Making a Java Webservice with Tomcat 6. Part 1.
1 Reply
.comments-link
.entry-header
Apache AXIS is a SOAP Web Service that does really cool things like automatically expose existing java classes as web services with no modification. I will take you through the entire install and testing of a simple web service like this. We will even give it a math quiz.
First thing we need to is to set up Tomcat to help with this simple example. On windows, you need to set two environmental variables:
CATALINA_HOME
(which is the path to your tomcat directory- eg c:\servers\tomcat)
and
JRE_HOME
(which is the path your JRE install- eg c:\Program Files\java\jre6)
and
JAVA_HOME
(Axis needs this, not Tomcat eg: C:\jdk1.6.0_27 -yes AXIS actually needs the full JDK)
Check the screenshot below for hints here.
[screenshot]
—
Now you need to get a copy of AXIS. Get it from here, unzip it, and drop the “axis” directory from you download into the tomcat install under “webapps”. Second thing is you need the libraries. Go to axis/lib and copy all these .jar files over into the tomcat/lib directory.
Before you lauch tomcat you should also check some things:
1. What port are you running on?
If there is a conflict go to tomcat/conf/server.xml and change the “port” attribute from the first “connector” tag to something else. I usually run on something other than 8080 (default).
2. Do you have any users set up in tomcat-users.xml?
If not throw one in there. I usually just run everything with “test” in all fields when developing.
Now you can run startup.bat out of the tomcat/bin directory.
Go to http://localhost:8084  (or http://localhost:8080  if you didn’t change it!).
If it is working, try to see if axis deployed OK. We dropped axis into the webapps directory so go ahead and navigate to http://localhost:8084/axis/  where you should see something like this:
[screenshot]
Now you will likely get some error that looks like this if you try to click “Call” on the main AXIS page:
No compiler found in your classpath!  (you may need to add 'tools.jar')
This may be because you don’t have the full JDK installed. Yes AXIS actually needs to compile stuff. The other possibility is that it is looking the JRE path for tools.jar… it will not find it! In this case you will have to copy tools.jar from the jdk/lib/tools.jar into tomcat/lib/ to get this working. It is 12 megabytes, you can’t miss it. This is what I had to do.
Try it again and you should get something like this:
[screenshot]
Okay so now lets try and actually do something. You are very likely here because your boss told you that you need to use AXIS and now you are trying to figure out what it is even for. So let’s do some examples. The easiest will be a very simple calculator class so here is what you will do:
Write the following and save it as “Calc.jws”:
public class Calc {
  public int add(int i1, int i2) {
    return i1 + i2; 
  }

  public int subtract(int i1, int i2) {
    return i1 - i2;
  }
}
Now copy this file into tomcat/webapps/axis/ yes, right into the root of the axis directory under your Tomcat Webapps. Now visit:
http://localhost:8084/axis/Calc.jws
And visit the link “click to see WSDL”.
An exceprt we will use:
 
<wsdl:operation name="add" parameterOrder="i1 i2">
    <wsdl:input message="impl:addRequest" name="addRequest"/>
    <wsdl:output message="impl:addResponse" name="addResponse"/>
</wsdl:operation>
Alright so there is that worked well right? Just add “?wsdl” to the end of the path to the webservice and you get the whole spec printed back. Now how do we communicate with this thing? It looks like we should be able to send it a command with an argument and it should spit stuff out right?
Can you just call it like this? -
http://localhost:8084/axis/Calc.jws?method=add&i1=3&i2=4
Yes. You should get something like:
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <soapenv:Body>
        <addResponse soapenv:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
            <addReturn xsi:type="xsd:int">7</addReturn>
        </addResponse>
    </soapenv:Body>
</soapenv:Envelope>
Right, 3 + 4 = 7. The arguments were i1 and i2 for integer one and integer two. You should notice we got back a typed response also. Everything in AXIS is typed.
More reading:
Apache’s install instructions:
http://axis.apache.org/axis/java/install.html
Another tutorial:
http://www.digizol.org/2008/07/web-service-axis-tutorial-client-server.html
A guy that goes a little more in depth:
http://www.lucianofiandesio.com/javatales/axant.html
.entry-content
This entry was posted in
Web Services
on
December 22, 2012
by
admin
.
.entry-meta
#post
How to send data via POST to a PHP script from a Flex App
Leave a reply
.comments-link
.entry-header
You have to be careful when setting up all of the parameters for an HTTP POST request from Flex. There are a lot of settings that favor XML and can throw you off. To be clear when you are sending parameters via POST, PHP will expect to read something like this:
This is how you want to format your service to get this type of passing:
<s:HTTPService
id="scoreSender"
method="POST"
result="scoreSender_resultHandler(event)"
resultFormat="e4x"
fault="scoreSender_faultHandler(event)"
>
Make sure NOT to specify a content type. It will end up either base 64 encoding it, or encoding your params in XML format which will not appear in the PHP $_POST array.
Then you can manually add all of the parameters like so:
scoreSender.url = Constants.postScoreURL;
var params:Object = new Object();
params["key"] = keyOut;
params["enemiesKilled"] = kills;
params["shotsTaken"] = shots;
params["feetWalked"] = feet;
params["itemsGotten"] = powerups;
params["timeStarted"] = timeStarted;
params["timeEnded"] = timeEnded;
params["deaths"] = playDeaths;
params["points"] = score;
params["name"] = nameEntry.text.replace("&", "").replace("?", "");
scoreSender.send(params);
Finally on the PHP end you can pull them out from the $_POST array:
$kills = $_POST['enemiesKilled'];
$shots = $_POST['shotsTaken'];
$feet = $_POST['feetWalked'];
$items = $_POST['itemsGotten'];
$timestart = $_POST['timeStarted'];
$timeended = $_POST['timeEnded'];
$deaths = $_POST['deaths'];
$points = $_POST['points'];
$name = $_POST['name'];
.entry-content
This entry was posted in
Flex
on
September 2, 2012
by
admin
.
.entry-meta
#post
How to pan screen for SoftKeyboard for Flex mobile apps.
Leave a reply
.comments-link
.entry-header
In a mobile app where you are using the soft keyboard to input text into a textbox or textarea if you have the textbox near the bottom of the screen you will need to scroll the screen to view the text input area while you are typing. Here I will show to pan the screen for SoftKeyboard in the app settings.
In the main app MXML file you can change the soft keyboard behavior element. “pan” will enable use easiest.
true
true
pan
Next in APP level MXML file you will want set the soft keyboard behavior:
xmlns:fx="http://ns.adobe.com/mxml/2009"
xmlns:s="library://ns.adobe.com/flex/spark" firstView="views.DodgeABroHomeView" applicationDPI="160"
applicationComplete="tabbedviewnavigatorapplication1_applicationCompleteHandler(event)"
frameRate="40"
resizeForSoftKeyboard="true"
>
Finally in the view where you will have the actual text input control you can use a scroller to specify exactly where you want to scroll too. However with the above settings, it should not be necessary. This is only if you want to override the normal default behavior built into Flex with the above setting.
.entry-content
This entry was posted in
Flex
on
September 2, 2012
by
admin
.
.entry-meta
#post
Flex ViewNavigator screen resolution reference
Leave a reply
.comments-link
.entry-header
>In a Flex ViewNavigator application you have a ton of confusing options for getting the current screen dimensions. Because there is a menu bar at the top of the screen- so you will actually get a short height- I found that using:
var screenYAxisMax:int = navigator.measuredHeight;
var screenXAxisMax:int = navigator.measuredWidth;
Will usually get me what I want on my iPhone 4. I have not yet tried this on an Android device but will update this when I do.
But for reference here is trace for all of the options I could find while debugging on my device for a Flex ViewNavigator Mobile app:
.entry-content
This entry was posted in
Flex
on
August 25, 2012
by
admin
.
.entry-meta
#post
Post navigation
←
Older posts
#nav-below .navigation
#content
#primary
Search for:
Recent Posts
Flex: Add MX controls to mobile App
A component skin system for same source mobile / desktop apps
Flex: Using mobile components in a Desktop app
Clojure Adventures Part 1
Flash Builder is useless without design view
Recent Comments
brand
on
Apache Axis 1.4 Tutorial – Making a Java Webservice with Tomcat 6. Part 1.
Archives
December 2012
September 2012
August 2012
Categories
AS3
Django
flashbuilder
Flex
Java
jQuery
Python
Uncategorized
Web Services
Meta
Log in
Entries
RSS
Comments
RSS
WordPress.org
#secondary
#main .wrapper
Proudly powered by WordPress
.site-info
#colophon
#page
//<![CDATA[
SyntaxHighlighter.all();
//]]>
